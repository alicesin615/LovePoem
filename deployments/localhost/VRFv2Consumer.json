{
  "address": "0x805B2fd02C3F10d618404DF89031dFdA29931bE1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkTokenContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "requestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "enum VRFv2Consumer.RequestPurpose",
          "name": "requestPurpose",
          "type": "uint8"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum VRFv2Consumer.RequestPurpose",
          "name": "requestPurpose",
          "type": "uint8"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumerAddress",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivingWallet",
          "type": "address"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        },
        {
          "internalType": "enum VRFv2Consumer.RequestPurpose",
          "name": "requestPurpose",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum VRFv2Consumer.RequestPurpose",
          "name": "requestPurpose",
          "type": "uint8"
        }
      ],
      "name": "prepRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumerAddress",
          "type": "address"
        }
      ],
      "name": "removeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_randomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestPurpose",
      "outputs": [
        {
          "internalType": "enum VRFv2Consumer.RequestPurpose",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "enum VRFv2Consumer.RequestPurpose",
          "name": "requestPurpose",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "topUpSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8611779b2dcbaef68db11525217ea8c74b513adfd4656c3009bec96792e1ef3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x805B2fd02C3F10d618404DF89031dFdA29931bE1",
    "transactionIndex": 0,
    "gasUsed": "1967970",
    "logsBloom": "0x0000000000000000000001008000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000c000020000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000020000000000000000000000400000000000000000000000000000000000000020000000000000",
    "blockHash": "0xd4d5a55af03d35407e362e3dc22259dd75c326307575c583d7a047d3e5493363",
    "transactionHash": "0xe8611779b2dcbaef68db11525217ea8c74b513adfd4656c3009bec96792e1ef3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6026163,
        "transactionHash": "0xe8611779b2dcbaef68db11525217ea8c74b513adfd4656c3009bec96792e1ef3",
        "address": "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
        "topics": [
          "0x464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf",
          "0x0000000000000000000000000000000000000000000000000000000000002e3d"
        ],
        "data": "0x000000000000000000000000805b2fd02c3f10d618404df89031dfda29931be1",
        "logIndex": 0,
        "blockHash": "0xd4d5a55af03d35407e362e3dc22259dd75c326307575c583d7a047d3e5493363"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6026163,
        "transactionHash": "0xe8611779b2dcbaef68db11525217ea8c74b513adfd4656c3009bec96792e1ef3",
        "address": "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
        "topics": [
          "0x43dc749a04ac8fb825cbd514f7c0e13f13bc6f2ee66043b76629d51776cff8e0",
          "0x0000000000000000000000000000000000000000000000000000000000002e3d"
        ],
        "data": "0x000000000000000000000000805b2fd02c3f10d618404df89031dfda29931be1",
        "logIndex": 1,
        "blockHash": "0xd4d5a55af03d35407e362e3dc22259dd75c326307575c583d7a047d3e5493363"
      }
    ],
    "blockNumber": 6026163,
    "cumulativeGasUsed": "1967970",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103b0a8a00be2ddc778e6e7eaa21791cd364625",
    "0x779877a7b0d9e8603169ddbd7836e478b4624789",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    3,
    100000,
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "78217f0e311172374d18048fed368c54",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkTokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"enum VRFv2Consumer.RequestPurpose\",\"name\":\"requestPurpose\",\"type\":\"uint8\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VRFv2Consumer.RequestPurpose\",\"name\":\"requestPurpose\",\"type\":\"uint8\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumerAddress\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivingWallet\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"internalType\":\"enum VRFv2Consumer.RequestPurpose\",\"name\":\"requestPurpose\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VRFv2Consumer.RequestPurpose\",\"name\":\"requestPurpose\",\"type\":\"uint8\"}],\"name\":\"prepRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumerAddress\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestPurpose\",\"outputs\":[{\"internalType\":\"enum VRFv2Consumer.RequestPurpose\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"enum VRFv2Consumer.RequestPurpose\",\"name\":\"requestPurpose\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUpSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"prepRequest(uint8)\":{\"params\":{\"requestPurpose\":\"The purpose of the request to be defined by LovePoem : Enum RequestPurpose\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"prepRequest(uint8)\":{\"notice\":\"Prepares a request to be fulfilled\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VRFv2Consumer.sol\":\"VRFv2Consumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xd3643595b0a46f577fff806736cbe4e3f81707c93fb1693a8a7960466e5cd321\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/VRFv2Consumer.sol\":{\"content\":\"//  SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\n\\ncontract VRFv2Consumer is ConfirmedOwner, VRFConsumerBaseV2 {\\n\\tVRFCoordinatorV2Interface immutable COORDINATOR;\\n\\tLinkTokenInterface immutable LINKTOKEN;\\n\\n\\taddress vrfCoordinator;\\n\\taddress linkTokenContract;\\n\\n\\tuint64 private s_subscriptionId;\\n\\tbytes32 s_keyHash;\\n\\tuint32 s_callbackGasLimit;\\n\\tuint16 s_requestConfirmations;\\n\\tuint32 s_numWords;\\n\\taddress s_owner;\\n\\n\\tuint256[] public s_randomWords;\\n\\tuint256 public s_requestId;\\n\\tRequestPurpose public s_requestPurpose;\\n\\n\\tenum RequestPurpose {\\n\\t\\tMint,\\n\\t\\tUnlockSurprise\\n\\t}\\n\\n\\tstruct RequestStatus {\\n\\t\\tbool fulfilled;\\n\\t\\tbool exists;\\n\\t\\tRequestPurpose requestPurpose;\\n\\t\\tuint256[] randomWords;\\n\\t}\\n\\n\\tuint256[] public requestIds;\\n\\tuint256 public lastRequestId;\\n\\tmapping(uint256 => RequestStatus) public s_requests;\\n\\n\\terror RequestNotFound(uint256 requestId);\\n\\terror InsufficientFunds(uint256 amount);\\n\\tevent RequestSent(uint256 requestId, RequestPurpose requestPurpose);\\n\\tevent RequestFulfilled(uint256 requestId, uint256[] randomWords, RequestPurpose requestPurpose);\\n\\n\\tconstructor(address _vrfCoordinator, address _linkTokenContract, bytes32 keyHash, uint16 requestConfirmations, uint32 callbackGasLimit, uint32 numWords) VRFConsumerBaseV2(_vrfCoordinator) ConfirmedOwner(msg.sender) {\\n\\t\\tCOORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n\\t\\tLINKTOKEN = LinkTokenInterface(_linkTokenContract);\\n\\t\\ts_keyHash = keyHash;\\n\\t\\ts_requestConfirmations = requestConfirmations;\\n\\t\\ts_callbackGasLimit = callbackGasLimit;\\n\\t\\ts_numWords = numWords;\\n\\t\\ts_owner = msg.sender;\\n\\t\\tcreateNewSubscription();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Prepares a request to be fulfilled\\n\\t * @param requestPurpose The purpose of the request to be defined by LovePoem : Enum RequestPurpose\\n\\t */\\n\\tfunction prepRequest(RequestPurpose requestPurpose) external payable returns (uint256 requestId) {\\n\\t\\ts_requestPurpose = requestPurpose;\\n\\t\\treturn requestRandomWordsFor(requestPurpose);\\n\\t}\\n\\n\\tfunction requestRandomWordsFor(RequestPurpose requestPurpose) internal returns (uint256 requestId) {\\n\\t\\trequestId = COORDINATOR.requestRandomWords(s_keyHash, s_subscriptionId, s_requestConfirmations, s_callbackGasLimit, s_numWords);\\n\\t\\ts_requests[requestId] = RequestStatus({fulfilled: false, exists: true, requestPurpose: requestPurpose, randomWords: new uint256[](0)});\\n\\t\\trequestIds.push(requestId);\\n\\t\\tlastRequestId = requestId;\\n\\t\\temit RequestSent(requestId, requestPurpose);\\n\\t\\treturn requestId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Fulfill a request processed by Chainlink VRF and returns the requested random words\\n\\t * as callback data\\n\\t */\\n\\tfunction fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\\n\\t\\tif (s_requests[_requestId].exists == false) {\\n\\t\\t\\trevert RequestNotFound(_requestId);\\n\\t\\t}\\n\\t\\ts_requestId = _requestId;\\n\\t\\ts_randomWords = _randomWords;\\n\\t\\ts_requestPurpose = s_requests[_requestId].requestPurpose;\\n\\t\\ts_requests[s_requestId].fulfilled = true;\\n\\t\\ts_requests[s_requestId].randomWords = s_randomWords;\\n\\t\\temit RequestFulfilled(s_requestId, s_randomWords, s_requestPurpose);\\n\\t}\\n\\n\\tfunction getRequestStatus(uint256 requestId) external view returns (bool fulfilled, uint256[] memory randomWords, RequestPurpose requestPurpose) {\\n\\t\\tif (s_requests[requestId].exists == false) {\\n\\t\\t\\trevert RequestNotFound(requestId);\\n\\t\\t}\\n\\t\\tRequestStatus memory requestStatus = s_requests[requestId];\\n\\t\\treturn (requestStatus.fulfilled, requestStatus.randomWords, requestStatus.requestPurpose);\\n\\t}\\n\\n\\t// Create a new subscription when the contract is initially deployed.\\n\\tfunction createNewSubscription() internal onlyOwner returns (uint256 subscriptionId) {\\n\\t\\ts_subscriptionId = COORDINATOR.createSubscription();\\n\\t\\t// Add this contract as a consumer of its own subscription.\\n\\t\\tCOORDINATOR.addConsumer(s_subscriptionId, address(this));\\n\\t\\treturn s_subscriptionId;\\n\\t}\\n\\n\\tfunction topUpSubscription(uint256 amount) external onlyOwner {\\n\\t\\tLINKTOKEN.transferAndCall(address(COORDINATOR), amount, abi.encode(s_subscriptionId));\\n\\t}\\n\\n\\tfunction addConsumer(address consumerAddress) external onlyOwner {\\n\\t\\t// Add a consumer contract to the subscription.\\n\\t\\tCOORDINATOR.addConsumer(s_subscriptionId, consumerAddress);\\n\\t}\\n\\n\\tfunction removeConsumer(address consumerAddress) external onlyOwner {\\n\\t\\t// Remove a consumer contract from the subscription.\\n\\t\\tCOORDINATOR.removeConsumer(s_subscriptionId, consumerAddress);\\n\\t}\\n\\n\\tfunction cancelSubscription(address receivingWallet) external onlyOwner {\\n\\t\\t// Cancel the subscription and send the remaining LINK to a wallet address.\\n\\t\\tCOORDINATOR.cancelSubscription(s_subscriptionId, receivingWallet);\\n\\t\\ts_subscriptionId = 0;\\n\\t}\\n\\n\\tfunction withdraw(uint256 amount, address to) external onlyOwner {\\n\\t\\tLINKTOKEN.transfer(to, amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0xaaff9aeb1e2b4ea811b87ad88c5a4c5ff996f9d5b45c1515419c8eda70285b86\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100fd5760003560e01c80638da5cb5b11610095578063d8a4676f11610064578063d8a4676f14610311578063e89e106a14610350578063f2fde38b1461037b578063f6eaffc8146103a4578063fc2a88c3146103e1576100fd565b80638da5cb5b1461024e57806393d81d5814610279578063a168fa89146102a2578063a9675c81146102e1576100fd565b80636171de38116100d15780636171de38146101a657806379ba5097146101d157806386850e93146101e85780638796ba8c14610211576100fd565b8062f714ce146101025780630e27e3df1461012b578063112940f9146101545780631fe543e31461017d575b600080fd5b34801561010e57600080fd5b5061012960048036038101906101249190611414565b61040c565b005b34801561013757600080fd5b50610152600480360381019061014d9190611454565b6104b7565b005b34801561016057600080fd5b5061017b60048036038101906101769190611454565b610565565b005b34801561018957600080fd5b506101a4600480360381019061019f91906115da565b610613565b005b3480156101b257600080fd5b506101bb6106d3565b6040516101c891906116ad565b60405180910390f35b3480156101dd57600080fd5b506101e66106e6565b005b3480156101f457600080fd5b5061020f600480360381019061020a91906116c8565b61087b565b005b34801561021d57600080fd5b50610238600480360381019061023391906116c8565b61097c565b6040516102459190611704565b60405180910390f35b34801561025a57600080fd5b506102636109a0565b604051610270919061172e565b60405180910390f35b34801561028557600080fd5b506102a0600480360381019061029b9190611454565b6109c9565b005b3480156102ae57600080fd5b506102c960048036038101906102c491906116c8565b610aa1565b6040516102d893929190611764565b60405180910390f35b6102fb60048036038101906102f691906117c0565b610af2565b6040516103089190611704565b60405180910390f35b34801561031d57600080fd5b50610338600480360381019061033391906116c8565b610b2e565b604051610347939291906118ab565b60405180910390f35b34801561035c57600080fd5b50610365610ca7565b6040516103729190611704565b60405180910390f35b34801561038757600080fd5b506103a2600480360381019061039d9190611454565b610cad565b005b3480156103b057600080fd5b506103cb60048036038101906103c691906116c8565b610cc1565b6040516103d89190611704565b60405180910390f35b3480156103ed57600080fd5b506103f6610ce5565b6040516104039190611704565b60405180910390f35b610414610ceb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846040518363ffffffff1660e01b815260040161046f9291906118e9565b6020604051808303816000875af115801561048e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b2919061193e565b505050565b6104bf610ceb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639f87fad7600360149054906101000a900467ffffffffffffffff16836040518363ffffffff1660e01b815260040161053092919061198e565b600060405180830381600087803b15801561054a57600080fd5b505af115801561055e573d6000803e3d6000fd5b5050505050565b61056d610ceb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637341c10c600360149054906101000a900467ffffffffffffffff16836040518363ffffffff1660e01b81526004016105de92919061198e565b600060405180830381600087803b1580156105f857600080fd5b505af115801561060c573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016106bc9291906119b7565b60405180910390fd5b6106cf8282610d7b565b5050565b600860009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076d90611a3d565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b610883610ceb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000083600360149054906101000a900467ffffffffffffffff166040516020016109089190611a5d565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161093593929190611af7565b6020604051808303816000875af1158015610954573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610978919061193e565b5050565b6009818154811061098c57600080fd5b906000526020600020016000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109d1610ceb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d7ae1d30600360149054906101000a900467ffffffffffffffff16836040518363ffffffff1660e01b8152600401610a4292919061198e565b600060405180830381600087803b158015610a5c57600080fd5b505af1158015610a70573d6000803e3d6000fd5b505050506000600360146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b600b6020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16905083565b600081600860006101000a81548160ff02191690836001811115610b1957610b18611636565b5b0217905550610b2782610efd565b9050919050565b600060606000801515600b600086815260200190815260200160002060000160019054906101000a900460ff16151503610b9f57836040517f4ec726c7000000000000000000000000000000000000000000000000000000008152600401610b969190611704565b60405180910390fd5b6000600b60008681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016000820160029054906101000a900460ff166001811115610c1a57610c19611636565b5b6001811115610c2c57610c2b611636565b5b815260200160018201805480602002602001604051908101604052809291908181526020018280548015610c7f57602002820191906000526020600020905b815481526020019060010190808311610c6b575b5050505050815250509050806000015181606001518260400151935093509350509193909250565b60075481565b610cb5610ceb565b610cbe81611184565b50565b60068181548110610cd157600080fd5b906000526020600020016000915090505481565b600a5481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7090611b81565b60405180910390fd5b565b60001515600b600084815260200190815260200160002060000160019054906101000a900460ff16151503610de757816040517f4ec726c7000000000000000000000000000000000000000000000000000000008152600401610dde9190611704565b60405180910390fd5b816007819055508060069080519060200190610e049291906112b0565b50600b600083815260200190815260200160002060000160029054906101000a900460ff16600860006101000a81548160ff02191690836001811115610e4d57610e4c611636565b5b02179055506001600b6000600754815260200190815260200160002060000160006101000a81548160ff0219169083151502179055506006600b60006007548152602001908152602001600020600101908054610eab9291906112fd565b507fae828170b7b9d7d86b0b02dece107e9ce479aeca3b636e410ba3e981a02fa5226007546006600860009054906101000a900460ff16604051610ef193929190611c77565b60405180910390a15050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600454600360149054906101000a900467ffffffffffffffff16600560049054906101000a900461ffff16600560009054906101000a900463ffffffff16600560069054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401610fac959493929190611d0a565b6020604051808303816000875af1158015610fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fef9190611d72565b9050604051806080016040528060001515815260200160011515815260200183600181111561102157611020611636565b5b8152602001600067ffffffffffffffff81111561104157611040611497565b5b60405190808252806020026020018201604052801561106f5781602001602082028036833780820191505090505b50815250600b600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a81548160ff021916908360018111156110f1576110f0611636565b5b021790555060608201518160010190805190602001906111129291906112b0565b50905050600981908060018154018082558091505060019003906000526020600020016000909190919091505580600a819055507fbf57b70c202bbc2cb10069ec6e4deea7f2b801a09294dd1ee5d5d01b03b4a21a8183604051611177929190611d9f565b60405180910390a1919050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e990611e14565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b8280548282559060005260206000209081019282156112ec579160200282015b828111156112eb5782518255916020019190600101906112d0565b5b5090506112f9919061134f565b5090565b82805482825590600052602060002090810192821561133e5760005260206000209182015b8281111561133d578254825591600101919060010190611322565b5b50905061134b919061134f565b5090565b5b80821115611368576000816000905550600101611350565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61139381611380565b811461139e57600080fd5b50565b6000813590506113b08161138a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113e1826113b6565b9050919050565b6113f1816113d6565b81146113fc57600080fd5b50565b60008135905061140e816113e8565b92915050565b6000806040838503121561142b5761142a611376565b5b6000611439858286016113a1565b925050602061144a858286016113ff565b9150509250929050565b60006020828403121561146a57611469611376565b5b6000611478848285016113ff565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114cf82611486565b810181811067ffffffffffffffff821117156114ee576114ed611497565b5b80604052505050565b600061150161136c565b905061150d82826114c6565b919050565b600067ffffffffffffffff82111561152d5761152c611497565b5b602082029050602081019050919050565b600080fd5b600061155661155184611512565b6114f7565b905080838252602082019050602084028301858111156115795761157861153e565b5b835b818110156115a2578061158e88826113a1565b84526020840193505060208101905061157b565b5050509392505050565b600082601f8301126115c1576115c0611481565b5b81356115d1848260208601611543565b91505092915050565b600080604083850312156115f1576115f0611376565b5b60006115ff858286016113a1565b925050602083013567ffffffffffffffff8111156116205761161f61137b565b5b61162c858286016115ac565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061167657611675611636565b5b50565b600081905061168782611665565b919050565b600061169782611679565b9050919050565b6116a78161168c565b82525050565b60006020820190506116c2600083018461169e565b92915050565b6000602082840312156116de576116dd611376565b5b60006116ec848285016113a1565b91505092915050565b6116fe81611380565b82525050565b600060208201905061171960008301846116f5565b92915050565b611728816113d6565b82525050565b6000602082019050611743600083018461171f565b92915050565b60008115159050919050565b61175e81611749565b82525050565b60006060820190506117796000830186611755565b6117866020830185611755565b611793604083018461169e565b949350505050565b600281106117a857600080fd5b50565b6000813590506117ba8161179b565b92915050565b6000602082840312156117d6576117d5611376565b5b60006117e4848285016117ab565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61182281611380565b82525050565b60006118348383611819565b60208301905092915050565b6000602082019050919050565b6000611858826117ed565b61186281856117f8565b935061186d83611809565b8060005b8381101561189e5781516118858882611828565b975061189083611840565b925050600181019050611871565b5085935050505092915050565b60006060820190506118c06000830186611755565b81810360208301526118d2818561184d565b90506118e1604083018461169e565b949350505050565b60006040820190506118fe600083018561171f565b61190b60208301846116f5565b9392505050565b61191b81611749565b811461192657600080fd5b50565b60008151905061193881611912565b92915050565b60006020828403121561195457611953611376565b5b600061196284828501611929565b91505092915050565b600067ffffffffffffffff82169050919050565b6119888161196b565b82525050565b60006040820190506119a3600083018561197f565b6119b0602083018461171f565b9392505050565b60006040820190506119cc600083018561171f565b6119d9602083018461171f565b9392505050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000611a276016836119e0565b9150611a32826119f1565b602082019050919050565b60006020820190508181036000830152611a5681611a1a565b9050919050565b6000602082019050611a72600083018461197f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ab2578082015181840152602081019050611a97565b60008484015250505050565b6000611ac982611a78565b611ad38185611a83565b9350611ae3818560208601611a94565b611aec81611486565b840191505092915050565b6000606082019050611b0c600083018661171f565b611b1960208301856116f5565b8181036040830152611b2b8184611abe565b9050949350505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000611b6b6016836119e0565b9150611b7682611b35565b602082019050919050565b60006020820190508181036000830152611b9a81611b5e565b9050919050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000611beb611be683611bc1565b611bce565b9050919050565b6000611bfe8254611bd8565b9050919050565b6000600182019050919050565b6000611c1d82611ba1565b611c2781856117f8565b9350611c3283611bac565b8060005b83811015611c6a57611c4782611bf2565b611c518882611828565b9750611c5c83611c05565b925050600181019050611c36565b5085935050505092915050565b6000606082019050611c8c60008301866116f5565b8181036020830152611c9e8185611c12565b9050611cad604083018461169e565b949350505050565b6000819050919050565b611cc881611cb5565b82525050565b600061ffff82169050919050565b611ce581611cce565b82525050565b600063ffffffff82169050919050565b611d0481611ceb565b82525050565b600060a082019050611d1f6000830188611cbf565b611d2c602083018761197f565b611d396040830186611cdc565b611d466060830185611cfb565b611d536080830184611cfb565b9695505050505050565b600081519050611d6c8161138a565b92915050565b600060208284031215611d8857611d87611376565b5b6000611d9684828501611d5d565b91505092915050565b6000604082019050611db460008301856116f5565b611dc1602083018461169e565b9392505050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000611dfe6017836119e0565b9150611e0982611dc8565b602082019050919050565b60006020820190508181036000830152611e2d81611df1565b905091905056fea26469706673582212200602d36c3d739160943916e33c9128f65956b07dea574316af765661d7024e1b64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "prepRequest(uint8)": {
        "params": {
          "requestPurpose": "The purpose of the request to be defined by LovePoem : Enum RequestPurpose"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "prepRequest(uint8)": {
        "notice": "Prepares a request to be fulfilled"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3889,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3891,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "linkTokenContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3893,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 3895,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_keyHash",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 3897,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_callbackGasLimit",
        "offset": 0,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 3899,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_requestConfirmations",
        "offset": 4,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 3901,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_numWords",
        "offset": 6,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 3903,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_owner",
        "offset": 10,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3906,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_randomWords",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3908,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_requestId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3911,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_requestPurpose",
        "offset": 0,
        "slot": "8",
        "type": "t_enum(RequestPurpose)3914"
      },
      {
        "astId": 3928,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "requestIds",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3930,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3935,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_requests",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)3925_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RequestPurpose)3914": {
        "encoding": "inplace",
        "label": "enum VRFv2Consumer.RequestPurpose",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)3925_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VRFv2Consumer.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)3925_storage"
      },
      "t_struct(RequestStatus)3925_storage": {
        "encoding": "inplace",
        "label": "struct VRFv2Consumer.RequestStatus",
        "members": [
          {
            "astId": 3916,
            "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3918,
            "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3921,
            "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
            "label": "requestPurpose",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(RequestPurpose)3914"
          },
          {
            "astId": 3924,
            "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}