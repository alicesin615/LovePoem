{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwnerWithProposal} from \"./ConfirmedOwnerWithProposal.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    // solhint-disable-next-line gas-custom-errors\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /// @notice Allows an owner to begin transferring ownership to a new address.\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /// @notice Allows an ownership transfer to be completed by the recipient.\n  function acceptOwnership() external override {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /// @notice Get the current owner\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /// @notice validate, transfer ownership, and emit relevant events\n  function _transferOwnership(address to) private {\n    // solhint-disable-next-line gas-custom-errors\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /// @notice validate access\n  function _validateOwnership() internal view {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /// @notice Reverts if called by anyone other than the contract owner.\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/mocks/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// A mock for testing code that relies on VRFCoordinatorV2.\npragma solidity ^0.8.4;\n\nimport \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport {ConfirmedOwner} from \"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\";\n\n// solhint-disable chainlink-solidity/prefix-immutable-variables-with-i\n// solhint-disable gas-custom-errors\n// solhint-disable avoid-low-level-calls\n\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface, ConfirmedOwner {\n\tuint96 public immutable BASE_FEE;\n\tuint96 public immutable GAS_PRICE_LINK;\n\tuint16 public immutable MAX_CONSUMERS = 100;\n\n\terror InvalidSubscription();\n\terror InsufficientBalance();\n\terror MustBeSubOwner(address owner);\n\terror TooManyConsumers();\n\terror InvalidConsumer();\n\terror InvalidRandomWords();\n\terror Reentrant();\n\n\tevent RandomWordsRequested(bytes32 indexed keyHash, uint256 requestId, uint256 preSeed, uint64 indexed subId, uint16 minimumRequestConfirmations, uint32 callbackGasLimit, uint32 numWords, address indexed sender);\n\tevent RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\n\tevent SubscriptionCreated(uint64 indexed subId, address owner);\n\tevent SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\n\tevent SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\n\tevent ConsumerAdded(uint64 indexed subId, address consumer);\n\tevent ConsumerRemoved(uint64 indexed subId, address consumer);\n\tevent ConfigSet();\n\n\tstruct Config {\n\t\t// Reentrancy protection.\n\t\tbool reentrancyLock;\n\t}\n\tConfig private s_config;\n\tuint64 internal s_currentSubId;\n\tuint256 internal s_nextRequestId = 1;\n\tuint256 internal s_nextPreSeed = 100;\n\tstruct Subscription {\n\t\taddress owner;\n\t\tuint96 balance;\n\t}\n\tmapping(uint64 => Subscription) internal s_subscriptions; /* subId */ /* subscription */\n\tmapping(uint64 => address[]) internal s_consumers; /* subId */ /* consumers */\n\n\tstruct Request {\n\t\tuint64 subId;\n\t\tuint32 callbackGasLimit;\n\t\tuint32 numWords;\n\t}\n\tmapping(uint256 => Request) internal s_requests; /* requestId */ /* request */\n\n\tconstructor(uint96 _baseFee, uint96 _gasPriceLink) ConfirmedOwner(msg.sender) {\n\t\tBASE_FEE = _baseFee;\n\t\tGAS_PRICE_LINK = _gasPriceLink;\n\t\tsetConfig();\n\t}\n\n\t/**\n\t * @notice Sets the configuration of the vrfv2 mock coordinator\n\t */\n\tfunction setConfig() public onlyOwner {\n\t\ts_config = Config({reentrancyLock: false});\n\t\temit ConfigSet();\n\t}\n\n\tfunction consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\n\t\taddress[] memory consumers = s_consumers[_subId];\n\t\tfor (uint256 i = 0; i < consumers.length; i++) {\n\t\t\tif (consumers[i] == _consumer) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tmodifier onlyValidConsumer(uint64 _subId, address _consumer) {\n\t\tif (!consumerIsAdded(_subId, _consumer)) {\n\t\t\trevert InvalidConsumer();\n\t\t}\n\t\t_;\n\t}\n\n\t/**\n\t * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n\t * @notice consumer.\n\t *\n\t * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n\t * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n\t * @dev against the real coordinator a small amount of additional LINK is required.\n\t *\n\t * @param _requestId the request to fulfill\n\t * @param _consumer the VRF randomness consumer to send the result to\n\t */\n\tfunction fulfillRandomWords(uint256 _requestId, address _consumer) external nonReentrant {\n\t\tfulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\n\t}\n\n\t/**\n\t * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n\t *\n\t * @param _requestId the request to fulfill\n\t * @param _consumer the VRF randomness consumer to send the result to\n\t * @param _words user-provided random words\n\t */\n\tfunction fulfillRandomWordsWithOverride(uint256 _requestId, address _consumer, uint256[] memory _words) public {\n\t\tuint256 startGas = gasleft();\n\t\tif (s_requests[_requestId].subId == 0) {\n\t\t\trevert(\"nonexistent request\");\n\t\t}\n\t\tRequest memory req = s_requests[_requestId];\n\n\t\tif (_words.length == 0) {\n\t\t\t_words = new uint256[](req.numWords);\n\t\t\tfor (uint256 i = 0; i < req.numWords; i++) {\n\t\t\t\t_words[i] = uint256(keccak256(abi.encode(_requestId, i)));\n\t\t\t}\n\t\t} else if (_words.length != req.numWords) {\n\t\t\trevert InvalidRandomWords();\n\t\t}\n\n\t\tVRFConsumerBaseV2 v;\n\t\tbytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\n\t\ts_config.reentrancyLock = true;\n\t\t(bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\n\t\ts_config.reentrancyLock = false;\n\n\t\tuint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\n\t\tif (s_subscriptions[req.subId].balance < payment) {\n\t\t\trevert InsufficientBalance();\n\t\t}\n\t\ts_subscriptions[req.subId].balance -= payment;\n\t\tdelete (s_requests[_requestId]);\n\t\temit RandomWordsFulfilled(_requestId, _requestId, payment, success);\n\t}\n\n\t/**\n\t * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n\t *\n\t * @param _subId the subscription to fund\n\t * @param _amount the amount to fund\n\t */\n\tfunction fundSubscription(uint64 _subId, uint96 _amount) public {\n\t\tif (s_subscriptions[_subId].owner == address(0)) {\n\t\t\trevert InvalidSubscription();\n\t\t}\n\t\tuint96 oldBalance = s_subscriptions[_subId].balance;\n\t\ts_subscriptions[_subId].balance += _amount;\n\t\temit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\n\t}\n\n\tfunction requestRandomWords(bytes32 _keyHash, uint64 _subId, uint16 _minimumRequestConfirmations, uint32 _callbackGasLimit, uint32 _numWords) external override nonReentrant onlyValidConsumer(_subId, msg.sender) returns (uint256) {\n\t\tif (s_subscriptions[_subId].owner == address(0)) {\n\t\t\trevert InvalidSubscription();\n\t\t}\n\n\t\tuint256 requestId = s_nextRequestId++;\n\t\tuint256 preSeed = s_nextPreSeed++;\n\n\t\ts_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\n\n\t\temit RandomWordsRequested(_keyHash, requestId, preSeed, _subId, _minimumRequestConfirmations, _callbackGasLimit, _numWords, msg.sender);\n\t\treturn requestId;\n\t}\n\n\tfunction createSubscription() external override returns (uint64 _subId) {\n\t\ts_currentSubId++;\n\t\ts_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\n\t\temit SubscriptionCreated(s_currentSubId, msg.sender);\n\t\treturn s_currentSubId;\n\t}\n\n\tfunction getSubscription(uint64 _subId) external view override returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers) {\n\t\tif (s_subscriptions[_subId].owner == address(0)) {\n\t\t\trevert InvalidSubscription();\n\t\t}\n\t\treturn (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\n\t}\n\n\tfunction cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) nonReentrant {\n\t\temit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\n\t\tdelete (s_subscriptions[_subId]);\n\t}\n\n\tmodifier onlySubOwner(uint64 _subId) {\n\t\taddress owner = s_subscriptions[_subId].owner;\n\t\tif (owner == address(0)) {\n\t\t\trevert InvalidSubscription();\n\t\t}\n\t\tif (msg.sender != owner) {\n\t\t\trevert MustBeSubOwner(owner);\n\t\t}\n\t\t_;\n\t}\n\n\tfunction getRequestConfig() external pure override returns (uint16, uint32, bytes32[] memory) {\n\t\treturn (3, 2000000, new bytes32[](0));\n\t}\n\n\tfunction addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\n\t\tif (s_consumers[_subId].length == MAX_CONSUMERS) {\n\t\t\trevert TooManyConsumers();\n\t\t}\n\n\t\tif (consumerIsAdded(_subId, _consumer)) {\n\t\t\treturn;\n\t\t}\n\n\t\ts_consumers[_subId].push(_consumer);\n\t\temit ConsumerAdded(_subId, _consumer);\n\t}\n\n\tfunction removeConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) onlyValidConsumer(_subId, _consumer) nonReentrant {\n\t\taddress[] storage consumers = s_consumers[_subId];\n\t\tfor (uint256 i = 0; i < consumers.length; i++) {\n\t\t\tif (consumers[i] == _consumer) {\n\t\t\t\taddress last = consumers[consumers.length - 1];\n\t\t\t\tconsumers[i] = last;\n\t\t\t\tconsumers.pop();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\temit ConsumerRemoved(_subId, _consumer);\n\t}\n\n\tfunction getConfig() external pure returns (uint16 minimumRequestConfirmations, uint32 maxGasLimit, uint32 stalenessSeconds, uint32 gasAfterPaymentCalculation) {\n\t\treturn (4, 2_500_000, 2_700, 33285);\n\t}\n\n\tfunction getFeeConfig()\n\t\texternal\n\t\tpure\n\t\treturns (\n\t\t\tuint32 fulfillmentFlatFeeLinkPPMTier1,\n\t\t\tuint32 fulfillmentFlatFeeLinkPPMTier2,\n\t\t\tuint32 fulfillmentFlatFeeLinkPPMTier3,\n\t\t\tuint32 fulfillmentFlatFeeLinkPPMTier4,\n\t\t\tuint32 fulfillmentFlatFeeLinkPPMTier5,\n\t\t\tuint24 reqsForTier2,\n\t\t\tuint24 reqsForTier3,\n\t\t\tuint24 reqsForTier4,\n\t\t\tuint24 reqsForTier5\n\t\t)\n\t{\n\t\treturn (\n\t\t\t100000, // 0.1 LINK\n\t\t\t100000, // 0.1 LINK\n\t\t\t100000, // 0.1 LINK\n\t\t\t100000, // 0.1 LINK\n\t\t\t100000, // 0.1 LINK\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0\n\t\t);\n\t}\n\n\tmodifier nonReentrant() {\n\t\tif (s_config.reentrancyLock) {\n\t\t\trevert Reentrant();\n\t\t}\n\t\t_;\n\t}\n\n\tfunction getFallbackWeiPerUnitLink() external pure returns (int256) {\n\t\treturn 4000000000000000; // 0.004 Ether\n\t}\n\n\tfunction requestSubscriptionOwnerTransfer(uint64 /*_subId*/, address /*_newOwner*/) external pure override {\n\t\trevert(\"not implemented\");\n\t}\n\n\tfunction acceptSubscriptionOwnerTransfer(uint64 /*_subId*/) external pure override {\n\t\trevert(\"not implemented\");\n\t}\n\n\tfunction pendingRequestExists(uint64 /*subId*/) public pure override returns (bool) {\n\t\trevert(\"not implemented\");\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}